{"title":"面向对象设计原则","uid":"7300152523883e0845d647300bd22677","slug":"设计模式-面向对象设计原则","date":"2022-10-14T16:13:20.000Z","updated":"2023-09-28T12:10:19.497Z","comments":true,"path":"api/articles/设计模式-面向对象设计原则.json","keywords":null,"cover":"https://cdn.statically.io/gh/moonlightleaf/pics@master/设计模式/9b8cc7_42_Destination1_4k.44dam11au5m0.jpg","content":"<h2 id=\"面向对象设计原则\"><a href=\"#面向对象设计原则\" class=\"headerlink\" title=\"面向对象设计原则\"></a>面向对象设计原则</h2><p><strong>1.依赖倒置原则（DIP）</strong></p>\n<ul>\n<li>高层模块（稳定）不应该依赖低层模块（变化），二者都应该依赖于抽象（稳定）。</li>\n<li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。</li>\n</ul>\n<p><strong>2.开放封闭原则（OCP）</strong></p>\n<ul>\n<li>对扩展开放，对更改封闭。</li>\n<li>类模块应该是可扩展，但是不可修改。</li>\n</ul>\n<p><strong>3.单一职责原则（SRP）</strong></p>\n<ul>\n<li>一个类应该仅有一个引起它变化的原因。</li>\n<li>变化的方向隐含着类的责任。</li>\n</ul>\n<p><strong>4.Liskov替换原则（LSP）</strong></p>\n<ul>\n<li>子类必须能够替换它们的基类。</li>\n<li>继承表达类型抽象。</li>\n</ul>\n<p><strong>5.接口隔离原则（ISP）</strong></p>\n<ul>\n<li>不应该强迫客户程序依赖它们不用的方法。</li>\n<li>接口应该小而完备。</li>\n</ul>\n<p>**6.优先使用对象组合，而不是类继承</p>\n<ul>\n<li>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。</li>\n<li>类继承在某种程度上破坏了封装性，子类父类耦合度高。</li>\n<li>对象组合只要求被破坏的对象具有良好定义的接口，耦合度低。</li>\n</ul>\n<p><strong>7.封装变化点</strong></p>\n<ul>\n<li>使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良影响，从而实现层次间的松耦合。</li>\n</ul>\n<p><strong>8.针对接口编程，而不是针对实现编程</strong></p>\n<ul>\n<li>不将变量类型声明为某个特定的具体类，而是声明为某个接口。（主要指业务类型而非string、vector这些）</li>\n<li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</li>\n<li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</li>\n</ul>\n","feature":true,"text":"面向对象设计原则1.依赖倒置原则（DIP） 高层模块（稳定）不应该依赖低层模块（变化），二者都应该依赖于抽象（稳定）。 抽象（稳定）不应该依赖于实现细节（变化）...","link":"","photos":[],"count_time":{"symbolsCount":601,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">面向对象设计原则</span></a></li></ol>","author":{"name":"月下叶子","slug":"blog-author","avatar":"https://cdn.statically.io/gh/moonlightleaf/pics@master/about/博客头像.1rm6v48dfu1s.jpg","link":"/","description":"日月东升西落，未曾负你我","socials":{"github":"https://github.com/moonlightleaf","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/leaf_in_the_moon","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zhong-v0/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"设计模式by李建忠","uid":"adf2676e452953c4451f885c2a466f48","slug":"设计模式","date":"2022-10-14T16:13:20.000Z","updated":"2023-09-28T12:10:19.497Z","comments":true,"path":"api/articles/设计模式.json","keywords":null,"cover":"https://cdn.statically.io/gh/moonlightleaf/pics@master/设计模式/9b8cc7_42_Destination1_4k.44dam11au5m0.jpg","text":"《 设计模式 》by李建忠 - 重点总结模板方法Template Method1.动机Motivation 在软件构建过程中，对于某一项任务，它常常有稳定的整体...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"}],"author":{"name":"月下叶子","slug":"blog-author","avatar":"https://cdn.statically.io/gh/moonlightleaf/pics@master/about/博客头像.1rm6v48dfu1s.jpg","link":"/","description":"日月东升西落，未曾负你我","socials":{"github":"https://github.com/moonlightleaf","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/leaf_in_the_moon","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/zhong-v0/"}}}},"feature":true},"next_post":{}}